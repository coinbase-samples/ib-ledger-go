// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/pbs/ledger/v1/service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InitializeAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitializeAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitializeAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitializeAccountRequestMultiError, or nil if none found.
func (m *InitializeAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitializeAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPortfolioId()) != 36 {
		err := InitializeAccountRequestValidationError{
			field:  "PortfolioId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetUserId()) != 36 {
		err := InitializeAccountRequestValidationError{
			field:  "UserId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetCurrency()) < 3 {
		err := InitializeAccountRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InitializeAccountRequestMultiError(errors)
	}

	return nil
}

// InitializeAccountRequestMultiError is an error wrapping multiple validation
// errors returned by InitializeAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type InitializeAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitializeAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitializeAccountRequestMultiError) AllErrors() []error { return m }

// InitializeAccountRequestValidationError is the validation error returned by
// InitializeAccountRequest.Validate if the designated constraints aren't met.
type InitializeAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitializeAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitializeAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitializeAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitializeAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitializeAccountRequestValidationError) ErrorName() string {
	return "InitializeAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitializeAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitializeAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitializeAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitializeAccountRequestValidationError{}

// Validate checks the field values on InitializeAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitializeAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitializeAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitializeAccountResponseMultiError, or nil if none found.
func (m *InitializeAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitializeAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccount() == nil {
		err := InitializeAccountResponseValidationError{
			field:  "Account",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitializeAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitializeAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitializeAccountResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAccountBalance() == nil {
		err := InitializeAccountResponseValidationError{
			field:  "AccountBalance",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccountBalance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitializeAccountResponseValidationError{
					field:  "AccountBalance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitializeAccountResponseValidationError{
					field:  "AccountBalance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccountBalance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitializeAccountResponseValidationError{
				field:  "AccountBalance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitializeAccountResponseMultiError(errors)
	}

	return nil
}

// InitializeAccountResponseMultiError is an error wrapping multiple validation
// errors returned by InitializeAccountResponse.ValidateAll() if the
// designated constraints aren't met.
type InitializeAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitializeAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitializeAccountResponseMultiError) AllErrors() []error { return m }

// InitializeAccountResponseValidationError is the validation error returned by
// InitializeAccountResponse.Validate if the designated constraints aren't met.
type InitializeAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitializeAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitializeAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitializeAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitializeAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitializeAccountResponseValidationError) ErrorName() string {
	return "InitializeAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitializeAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitializeAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitializeAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitializeAccountResponseValidationError{}

// Validate checks the field values on GetAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountsRequestMultiError, or nil if none found.
func (m *GetAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) != 36 {
		err := GetAccountsRequestValidationError{
			field:  "UserId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return GetAccountsRequestMultiError(errors)
	}

	return nil
}

// GetAccountsRequestMultiError is an error wrapping multiple validation errors
// returned by GetAccountsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountsRequestMultiError) AllErrors() []error { return m }

// GetAccountsRequestValidationError is the validation error returned by
// GetAccountsRequest.Validate if the designated constraints aren't met.
type GetAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountsRequestValidationError) ErrorName() string {
	return "GetAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountsRequestValidationError{}

// Validate checks the field values on GetAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountsResponseMultiError, or nil if none found.
func (m *GetAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountsResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAccountsResponseMultiError(errors)
	}

	return nil
}

// GetAccountsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccountsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountsResponseMultiError) AllErrors() []error { return m }

// GetAccountsResponseValidationError is the validation error returned by
// GetAccountsResponse.Validate if the designated constraints aren't met.
type GetAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountsResponseValidationError) ErrorName() string {
	return "GetAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountsResponseValidationError{}

// Validate checks the field values on CreateTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransactionRequestMultiError, or nil if none found.
func (m *CreateTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrderId()) != 36 {
		err := CreateTransactionRequestValidationError{
			field:  "OrderId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if m.GetSender() == nil {
		err := CreateTransactionRequestValidationError{
			field:  "Sender",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "Sender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetReceiver() == nil {
		err := CreateTransactionRequestValidationError{
			field:  "Receiver",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "Receiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "Receiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalAmount

	if all {
		switch v := interface{}(m.GetFeeAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "FeeAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "FeeAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeeAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "FeeAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TransactionType

	if all {
		switch v := interface{}(m.GetRequestId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "RequestId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionRequestValidationError{
					field:  "RequestId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionRequestValidationError{
				field:  "RequestId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransactionRequestMultiError(errors)
	}

	return nil
}

// CreateTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransactionRequestMultiError) AllErrors() []error { return m }

// CreateTransactionRequestValidationError is the validation error returned by
// CreateTransactionRequest.Validate if the designated constraints aren't met.
type CreateTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionRequestValidationError) ErrorName() string {
	return "CreateTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionRequestValidationError{}

// Validate checks the field values on CreateTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransactionResponseMultiError, or nil if none found.
func (m *CreateTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransactionResponseValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransactionResponseValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransactionResponseValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransactionResponseMultiError(errors)
	}

	return nil
}

// CreateTransactionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTransactionResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransactionResponseMultiError) AllErrors() []error { return m }

// CreateTransactionResponseValidationError is the validation error returned by
// CreateTransactionResponse.Validate if the designated constraints aren't met.
type CreateTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionResponseValidationError) ErrorName() string {
	return "CreateTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionResponseValidationError{}

// Validate checks the field values on PartialReleaseHoldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartialReleaseHoldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartialReleaseHoldRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartialReleaseHoldRequestMultiError, or nil if none found.
func (m *PartialReleaseHoldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PartialReleaseHoldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrderId()) != 36 {
		err := PartialReleaseHoldRequestValidationError{
			field:  "OrderId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetRequestId()) != 36 {
		err := PartialReleaseHoldRequestValidationError{
			field:  "RequestId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for SenderAmount

	// no validation rules for ReceiverAmount

	if all {
		switch v := interface{}(m.GetVenueFeeAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartialReleaseHoldRequestValidationError{
					field:  "VenueFeeAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartialReleaseHoldRequestValidationError{
					field:  "VenueFeeAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVenueFeeAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartialReleaseHoldRequestValidationError{
				field:  "VenueFeeAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRetailFeeAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartialReleaseHoldRequestValidationError{
					field:  "RetailFeeAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartialReleaseHoldRequestValidationError{
					field:  "RetailFeeAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetailFeeAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartialReleaseHoldRequestValidationError{
				field:  "RetailFeeAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PartialReleaseHoldRequestMultiError(errors)
	}

	return nil
}

// PartialReleaseHoldRequestMultiError is an error wrapping multiple validation
// errors returned by PartialReleaseHoldRequest.ValidateAll() if the
// designated constraints aren't met.
type PartialReleaseHoldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartialReleaseHoldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartialReleaseHoldRequestMultiError) AllErrors() []error { return m }

// PartialReleaseHoldRequestValidationError is the validation error returned by
// PartialReleaseHoldRequest.Validate if the designated constraints aren't met.
type PartialReleaseHoldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartialReleaseHoldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartialReleaseHoldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartialReleaseHoldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartialReleaseHoldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartialReleaseHoldRequestValidationError) ErrorName() string {
	return "PartialReleaseHoldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PartialReleaseHoldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartialReleaseHoldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartialReleaseHoldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartialReleaseHoldRequestValidationError{}

// Validate checks the field values on PartialReleaseHoldResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartialReleaseHoldResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartialReleaseHoldResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartialReleaseHoldResponseMultiError, or nil if none found.
func (m *PartialReleaseHoldResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PartialReleaseHoldResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Successful

	if all {
		switch v := interface{}(m.GetFailureMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartialReleaseHoldResponseValidationError{
					field:  "FailureMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartialReleaseHoldResponseValidationError{
					field:  "FailureMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailureMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartialReleaseHoldResponseValidationError{
				field:  "FailureMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PartialReleaseHoldResponseMultiError(errors)
	}

	return nil
}

// PartialReleaseHoldResponseMultiError is an error wrapping multiple
// validation errors returned by PartialReleaseHoldResponse.ValidateAll() if
// the designated constraints aren't met.
type PartialReleaseHoldResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartialReleaseHoldResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartialReleaseHoldResponseMultiError) AllErrors() []error { return m }

// PartialReleaseHoldResponseValidationError is the validation error returned
// by PartialReleaseHoldResponse.Validate if the designated constraints aren't met.
type PartialReleaseHoldResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartialReleaseHoldResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartialReleaseHoldResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartialReleaseHoldResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartialReleaseHoldResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartialReleaseHoldResponseValidationError) ErrorName() string {
	return "PartialReleaseHoldResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PartialReleaseHoldResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartialReleaseHoldResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartialReleaseHoldResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartialReleaseHoldResponseValidationError{}

// Validate checks the field values on FinalizeTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinalizeTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinalizeTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinalizeTransactionRequestMultiError, or nil if none found.
func (m *FinalizeTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FinalizeTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrderId()) != 36 {
		err := FinalizeTransactionRequestValidationError{
			field:  "OrderId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetRequestId()) != 36 {
		err := FinalizeTransactionRequestValidationError{
			field:  "RequestId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for FinalizedStatus

	if all {
		switch v := interface{}(m.GetSenderAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinalizeTransactionRequestValidationError{
					field:  "SenderAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinalizeTransactionRequestValidationError{
					field:  "SenderAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSenderAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinalizeTransactionRequestValidationError{
				field:  "SenderAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceiverAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinalizeTransactionRequestValidationError{
					field:  "ReceiverAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinalizeTransactionRequestValidationError{
					field:  "ReceiverAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiverAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinalizeTransactionRequestValidationError{
				field:  "ReceiverAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVenueFeeAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinalizeTransactionRequestValidationError{
					field:  "VenueFeeAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinalizeTransactionRequestValidationError{
					field:  "VenueFeeAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVenueFeeAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinalizeTransactionRequestValidationError{
				field:  "VenueFeeAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRetailFeeAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinalizeTransactionRequestValidationError{
					field:  "RetailFeeAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinalizeTransactionRequestValidationError{
					field:  "RetailFeeAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetailFeeAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinalizeTransactionRequestValidationError{
				field:  "RetailFeeAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FinalizeTransactionRequestMultiError(errors)
	}

	return nil
}

// FinalizeTransactionRequestMultiError is an error wrapping multiple
// validation errors returned by FinalizeTransactionRequest.ValidateAll() if
// the designated constraints aren't met.
type FinalizeTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinalizeTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinalizeTransactionRequestMultiError) AllErrors() []error { return m }

// FinalizeTransactionRequestValidationError is the validation error returned
// by FinalizeTransactionRequest.Validate if the designated constraints aren't met.
type FinalizeTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinalizeTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinalizeTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinalizeTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinalizeTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinalizeTransactionRequestValidationError) ErrorName() string {
	return "FinalizeTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FinalizeTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinalizeTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinalizeTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinalizeTransactionRequestValidationError{}

// Validate checks the field values on FinalizeTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinalizeTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinalizeTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinalizeTransactionResponseMultiError, or nil if none found.
func (m *FinalizeTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FinalizeTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Successful

	if all {
		switch v := interface{}(m.GetFailureMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinalizeTransactionResponseValidationError{
					field:  "FailureMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinalizeTransactionResponseValidationError{
					field:  "FailureMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailureMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinalizeTransactionResponseValidationError{
				field:  "FailureMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FinalizeTransactionResponseMultiError(errors)
	}

	return nil
}

// FinalizeTransactionResponseMultiError is an error wrapping multiple
// validation errors returned by FinalizeTransactionResponse.ValidateAll() if
// the designated constraints aren't met.
type FinalizeTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinalizeTransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinalizeTransactionResponseMultiError) AllErrors() []error { return m }

// FinalizeTransactionResponseValidationError is the validation error returned
// by FinalizeTransactionResponse.Validate if the designated constraints
// aren't met.
type FinalizeTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinalizeTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinalizeTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinalizeTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinalizeTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinalizeTransactionResponseValidationError) ErrorName() string {
	return "FinalizeTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FinalizeTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinalizeTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinalizeTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinalizeTransactionResponseValidationError{}
