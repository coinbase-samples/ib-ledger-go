/**
 * Copyright 2022 Coinbase Global, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package pkg.pbs.ledger.v1;

import "google/protobuf/wrappers.proto";
import "pkg/pbs/ledger/v1/model.proto";
import "validate/validate.proto";

option go_package = "github.com/coinbase-samples/ib-ledger-go/pkg/pbs/ledger/v1";

// Ledger API
service Ledger {
  rpc InitializeAccount(InitializeAccountRequest) returns (InitializeAccountResponse) {}
  rpc GetAccounts(GetAccountsRequest) returns (GetAccountsResponse) {}
  rpc CreateTransaction(CreateTransactionRequest) returns (CreateTransactionResponse) {}
  rpc PostFill(PostFillRequest) returns (PostFillResponse) {}
  rpc FinalizeTransaction(FinalizeTransactionRequest) returns (FinalizeTransactionResponse) {}
}

message InitializeAccountRequest {
  string portfolioId = 1[(validate.rules).string.len = 36];
  string userId = 2[(validate.rules).string.len = 36];
  string currency = 3[(validate.rules).string.min_len = 3];
}

message InitializeAccountResponse {
  Account account = 1[(validate.rules).message.required = true];
  AccountBalance accountBalance = 2[(validate.rules).message.required = true];
}

message GetAccountsRequest {
  string userId = 1[(validate.rules).string.len = 36];
}

message GetAccountsResponse {
  repeated AccountAndBalance accounts = 1;
}

message CreateTransactionRequest {
  string orderId = 1[(validate.rules).string.len = 36];
  Account sender = 2[(validate.rules).message.required = true];
  Account receiver = 3[(validate.rules).message.required = true];
  string totalAmount = 4;
  google.protobuf.StringValue feeAmount = 5;
  TransactionType transactionType = 6;
  google.protobuf.StringValue requestId = 7;
}

message CreateTransactionResponse {
  Transaction transaction = 1;
}

message PostFillRequest {
  string orderId = 1[(validate.rules).string.len = 36];
  string requestId = 2;
  string senderAmount = 3;
  string receiverAmount = 4;
  google.protobuf.StringValue venueFeeAmount = 6;
  google.protobuf.StringValue retailFeeAmount = 7;
  string fillId = 8[(validate.rules).string.len = 36];
  string filledQuantity = 9;
  string filledValue = 10;
  string commission = 11;
}

message PostFillResponse {
}

message FinalizeTransactionRequest {
  string orderId = 1[(validate.rules).string.len = 36];
  string requestId = 2;
  TransactionStatus finalizedStatus = 3;
  google.protobuf.StringValue senderAmount = 4;
  google.protobuf.StringValue receiverAmount = 5;
  google.protobuf.StringValue venueFeeAmount = 6;
  google.protobuf.StringValue retailFeeAmount = 7;
}

message FinalizeTransactionResponse {
}
